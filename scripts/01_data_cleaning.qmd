---
title: "DATA3888_2025 Biomedical"
subtitle: "Predicting SLE Disease Risk Using Gene Expression Data"
author: "(Place your name/Unikey/SID)"
date: "`r format(Sys.time(), '%d %B, %Y')`"
format:
  html:
    code-tools: true
    code-fold: true
    fig_caption: yes
    number_sections: yes
    embed-resources: true
    theme: flatly
    css: 
      - https://use.fontawesome.com/releases/v5.0.6/css/all.css
    toc: true
    toc_depth: 4
    toc_float: true
execute:
  echo: true
  tidy: true
editor: 
  markdown: 
    wrap: 72
---

```{r setup, include=FALSE}
library(tidyverse)
library(Biobase)
library(BiocGenerics)
library(GEOquery)
```

# 1 Introduction

**Develop and deploy a risk calculator to predict SLE risk using gene
expression and clinical data.**\
Include:

\- Background on SLE

\- Aim of the analysis

 - Overview of the dataset (GSE88884)

 - Outline of steps: Data cleaning → EDA → Modelling → Interpretation

# 2 Data Import and preprocess(GSE88884)

## 2.1 Gene Expression Data

Load the preprocessed gene expression matrix. The data contains **92,343
probeset IDs** and **1,820 patient samples**.

```{r}
library(readr)
library(tidyverse)

# 1. Load the gene expression data (already preprocessed)
# download from GSE88884
expr_raw <- read_tsv("data/GSE88884_ILLUMINATE1and2_SLEbaselineVsHealthy_preprocessed.txt")
expr_df <- as.data.frame(expr_raw)
rownames(expr_df) <- expr_df$probeset
expr_df$probeset <- NULL

dim(expr_df) #92343 genes and 1820 patients
head(expr_df)[, 1:5]
```

## 2.2 Phenotypic data

```{r}
# 2. Download phenotypic data using GEOquery
library(GEOquery)

gse88884 <- getGEO("GSE88884")
gse88884 <- gse88884$GSE88884_series_matrix.txt.gz
pheno_gse88884 <- pData(gse88884)

colnames(pheno_gse88884)
head(pheno_gse88884$supplementary_file)
```

### Sample Mapping

We extracted the mapping between sample accession numbers (GSM IDs) and
CEL filenames from the supplementary_file column in the phenotypic data.
The column names of the gene expression matrix were replaced with their
corresponding GSM IDs to facilitate downstream analysis and
interpretation.

```{r}
library(dplyr)

# 1. Extract supplementary file column
pheno_clean <- pheno_gse88884 %>%
  mutate(
    # Extract GSM accession
    GSM_ID = geo_accession,
    
    # Extract CEL filename from supplementary_file column
    cel_filename = str_extract(supplementary_file, "(?<=_)[A-Z0-9]+\\.CEL")
  ) %>%
  dplyr::select(GSM_ID, cel_filename, source_name_ch1, contains("characteristics_ch1"))

# Quick check
head(pheno_clean[, 1:3])

# Keep only samples present in expression data
matched_pheno <- pheno_clean %>%
  filter(cel_filename %in% colnames(expr_df))

# Filter expression data
expr_df_matched <- expr_df[, matched_pheno$cel_filename]

name_map <- setNames(matched_pheno$GSM_ID, matched_pheno$cel_filename)
colnames(expr_df_matched) <- name_map[colnames(expr_df_matched)]

head(expr_df_matched)
dim(expr_df_matched)
```

### Keep the Probe IDs

"Probe IDs correspond to the Ensembl gene symbols or internal IDs
generated in their processing pipeline."

We used probeset IDs as feature names. Biological interpretation of
individual probes was not performed but can be done in future work.

### Data cleaning 

In this section, we cleaned and processed the clinical (phenotypic) data
from the GSE88884 dataset to prepare it for exploratory data analysis
and predictive modelling.

1.  **Variable Selection and Renaming** We first selected a subset of
    relevant clinical variables from the original phenotype data,
    including demographic variables (sex, age, race, region), disease
    activity score (SLEDAI), complement levels (C3 and C4), anti-dsDNA
    antibody measurements, and treatment group. We also renamed the
    columns for clarity and consistency.

2.  **Simplifying Group Labels** The `group` column originally contained
    long text labels. We simplified this column to only retain two
    categories: `"SLE"` and `"Normal"` (healthy controls), which will be
    used as the primary outcome variable in the analysis.

3.  **Cleaning Column Values** Many columns contained descriptive
    prefixes within their values (e.g. `"age_at_baseline: 43.5"`,
    `"Sex: Female"`). We removed these prefixes using `str_remove()` and
    `str_replace()` functions to retain only the useful information
    (e.g. `"43.5"`, `"Female"`). For numeric columns (age, anti-dsDNA
    titer, C3, C4, SLEDAI score), we converted them to numeric type
    after removing the prefixes.

4.  **Handling Missing Values** Missing values in this dataset were
    recorded as `"--"`. We replaced these with `NA` using `na_if()` to
    ensure they are correctly recognised as missing data in downstream
    analyses.

5.  **Important Clinical Thresholds** During cleaning, we removed long
    descriptive texts that described the clinical thresholds used for
    categorising certain variables. These descriptions are important to
    interpret the clinical meaning of categorical variables, so we
    explicitly report them here for reference:

    **Anti-dsDNA antibody status (`adna_at_baseline`):** *Negative* if
    titer \< 30 IU/mL; *Positive* if titer ≥ 30 IU/mL.

    **Complement C3 status (`c3_status`):** *Low* if C3 \< 0.9 g/L;
    *Normal* if C3 ≥ 0.9 g/L; *High* otherwise.

    **Complement C4 status (`c4_status`):** *Low* if C4 \< 0.1 g/L;
    *Normal* if C4 ≥ 0.1 g/L; *High* otherwise.

```{r}
library(dplyr)

pheno_clean <- pheno_clean %>%
   dplyr::select(
    sledai_at_baseline = characteristics_ch1.8,
    group = characteristics_ch1.2,
    age_at_baseline = characteristics_ch1.6,
    sex = characteristics_ch1.5,
    race = characteristics_ch1.4,
    region = characteristics_ch1.7,
    batch = characteristics_ch1.3,
    time = characteristics_ch1.1,
    adna_at_baseline = characteristics_ch1.9,
    antidsdna_at_baseline = characteristics_ch1.10,
    c3_status = characteristics_ch1.11,
    c3 = characteristics_ch1.12,
    c4_status = characteristics_ch1.13,
    c4 = characteristics_ch1.14,
    cel_filename
  )

# 1. Clean 'group' column to only keep "SLE" or "Healthy"
pheno_clean <- pheno_clean %>%
  mutate(
    group = case_when(
      str_detect(group, "SLE") ~ "SLE",
      str_detect(group, "Normal") ~ "Normal",
      TRUE ~ NA_character_
    )
  )

# 2. Clean numeric and categorical columns (remove prefix)
pheno_clean <- pheno_clean %>%
  mutate(
    # Age
    age_at_baseline = str_remove(age_at_baseline, "age_at_baseline: "),
    age_at_baseline = na_if(age_at_baseline, "--"),
    age_at_baseline = as.numeric(age_at_baseline),
    # Sex
    sex = str_remove(sex, "Sex: "),
    sex = na_if(sex, "--"),
    # Race
    race = str_remove(race, "race: "),
    race = na_if(race, "--"),
    # Region
    region = str_remove(region, "region: "),
    region = na_if(region, "--"),
    # Batch
    batch = str_remove(batch, "batch: "),
    batch  = na_if(batch, "--"),
    # Time
    time = str_remove(time, "time: "),
    time = na_if(time, "--"),
    # adna
    adna_at_baseline = str_replace(adna_at_baseline, "^.*: ", ""),  # Remove everything before and including last colon
    adna_at_baseline = na_if(adna_at_baseline, "--"),
    # antidsna 
    antidsdna_at_baseline = str_remove(antidsdna_at_baseline, "antidsdna_at_baseline \\(iu\\): "),
    antidsdna_at_baseline = na_if(antidsdna_at_baseline, "--"),
    antidsdna_at_baseline = as.numeric(antidsdna_at_baseline),
    # c3_status
    c3_status = str_remove(c3_status, "c3base \\(low < 0.9 g/l; normal >= 0.9 g/l; h = high\\): "),
    c3_status = na_if(c3_status, "--"),
    # c3
    c3 = str_remove(c3, "c3_at_baseline \\(g/l\\): "),
    c3 = na_if(c3, "--"),
    c3 = as.numeric(c3),
    # c4
    c4_status = str_remove(c4_status, "c4base \\(low < 0.1 g/l; normal >= 0.1 g/l; h = high\\): "),
    c4_status = na_if(c4_status, "--"),
    # c4
    c4 = str_remove(c4, "c4_at_baseline \\(g/l\\): "),
    c4 = na_if(c4, "--"),
    c4 = as.numeric(c4),
    # sledai
    sledai_at_baseline = str_remove(sledai_at_baseline, "sledai_at_baseline: "),
    sledai_at_baseline = na_if(sledai_at_baseline, "--"),
    sledai_at_baseline = as.numeric(sledai_at_baseline)
  )

colnames(pheno_clean)
head(pheno_clean)
```

# 3 Data Overview

In this analysis, we used two cleaned datasets derived from the GSE88884
study, which investigated gene expression profiles and clinical
characteristics of patients with Systemic Lupus Erythematosus (SLE) and
healthy controls.

## 2.1 Gene Expression data(`expr_df_matched`)

This dataset contains normalized gene expression values obtained from
pre-processed microarray data. It includes **92,343 probeset IDs
(features)** measured across **1,820 patient samples**. Each row
represents a specific probeset ID, and each column corresponds to an
individual patient sample. The expression data has been matched to the
clinical metadata and prepared for downstream differential expression
analysis and predictive modelling.

```{r}
head(expr_df_matched)
```

## 2.2 Clinical Data (`pheno_clean`)

The clinical dataset includes detailed **phenotypic and demographic
information** for the same set of patient samples. It contains variables
such as:

-   **group:** Disease status (SLE or Normal)

-   **age_at_baseline:** Age of patient at baseline

-   **sex, race, region:** Demographic information

-   **batch, time:** Technical variables

-   **adna_at_baseline:** Anti-dsDNA antibody status (Positive/Negative)

-   **antidsdna_at_baseline:** Anti-dsDNA antibody titer (IU/mL)

-   **c3, c3_status, c4, c4_status:** Complement protein levels and
    status

-   **sledai_at_baseline:** SLE Disease Activity Index score at baseline

The dataset was cleaned to remove unnecessary prefixes and placeholder
values (e.g. `"--"`), and missing values were converted to `NA`. The
clinical variables were formatted appropriately for statistical analysis
and machine learning.

These two datasets were merged based on sample identifiers to enable
integrated analysis of gene expression profiles and clinical features.

```{r}
head(pheno_clean)
```

```{r}
# Save cleaned datasets
saveRDS(expr_df_matched, file = "data/expr_df_matched.rds")
saveRDS(pheno_clean, file = "data/pheno_clean.rds")
```
