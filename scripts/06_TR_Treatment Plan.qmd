---
title: "06_immune_model"
subtitle: "Place a subtitle here if needed"
author: "(Place your name/Unikey/SID)"
date: "`r format(Sys.time(), '%d %B, %Y')`"
format:
  html:
    code-tools: true
    code-fold: true
    fig_caption: yes
    number_sections: yes
    embed-resources: true
    theme: flatly
    css: 
      - https://use.fontawesome.com/releases/v5.0.6/css/all.css
    toc: true
    toc_depth: 4
    toc_float: true
execute:
  echo: true
  tidy: true
---

# **1 Data Input and Pre-processing**

Select Top 50 Genes and Match to Expression Matrix

```{r}
library(dplyr)
library(tidyverse)
library(survival)
library(broom)
library(glmnet)

# Load data
pData <- readRDS("E:/data3888/65391/65391/dataset/pData_final.rds")
eMat <- readRDS("E:/data3888/65391/65391/dataset/eMat_with_symbols.rds")
top200 <- read.csv("E:/data3888/65391/65391/dataset/top_200_genes_two_timepoints.csv")

# Select top genes
top_genes <- top200 %>% arrange(P.Value) %>% pull(X) %>% head(50)
genes_to_use <- intersect(top_genes, rownames(eMat))

# Preprocess pData
pData <- pData %>%
  mutate(
    sledai = as.numeric(sledai),
    visit = as.numeric(visit)
  ) %>%
  arrange(patient_id, visit) %>%
  group_by(patient_id) %>%
  mutate(
    sledai_next = lead(sledai),
    sledai_change = sledai_next - sledai,
    status = ifelse(!is.na(sledai_change) & sledai_change >= 3, 1, 0),
    time = visit,
    patient_str = sprintf("%03d", patient_id),
    visit_str = sprintf("%02d", visit),
    sample_id = paste0(group_type, "_", patient_str, "_V", visit_str)
  ) %>%
  ungroup()

# sample_id: SLE_018_V01
# patient_id: 18
```

```{r}
# Prepare expression matrix
eMat_subset <- eMat[genes_to_use, ]
eMat_transposed <- as.data.frame(t(eMat_subset))
eMat_transposed$sample_id <- rownames(eMat_transposed)

# Merge with pData
df_cox <- merge(eMat_transposed, pData, by = "sample_id") %>%
  filter(!is.na(status) & !is.na(time) & !is.na(sledai))
```

```{r}
# Clinical variables
clinical_vars <- c("neutrophil_count", "lymphocyte_count")

df_cox_filtered <- df_cox %>%
  select(any_of(c("sample_id", clinical_vars, genes_to_use, "sledai", "status", "time"))) %>%
  mutate(
    neutrophil_count = as.numeric(neutrophil_count),
    lymphocyte_count = as.numeric(lymphocyte_count)
  )

# Immune type classification
df_cox_filtered <- df_cox_filtered %>%
  mutate(
    immune_type = case_when(
      neutrophil_count > median(neutrophil_count, na.rm = TRUE) & lymphocyte_count <= median(lymphocyte_count, na.rm = TRUE) ~ "Innate-dominant",
      lymphocyte_count > median(lymphocyte_count, na.rm = TRUE) & neutrophil_count <= median(neutrophil_count, na.rm = TRUE) ~ "Adaptive-dominant",
      TRUE ~ "Mixed"
    )
  )
```

```{r}
# ÊûÑÂª∫ df_cox_filtered
df_cox_filtered <- df_cox %>%
  select(any_of(c("sample_id", "cumulative_time", clinical_vars, genes_to_use, "sledai", "status", "time"))) %>%
  mutate(
    neutrophil_count = as.numeric(neutrophil_count),
    lymphocyte_count = as.numeric(lymphocyte_count)
  ) %>%
  mutate(
    immune_type = case_when(
      neutrophil_count > median(neutrophil_count, na.rm = TRUE) & lymphocyte_count <= median(lymphocyte_count, na.rm = TRUE) ~ "Innate-dominant",
      lymphocyte_count > median(lymphocyte_count, na.rm = TRUE) & neutrophil_count <= median(neutrophil_count, na.rm = TRUE) ~ "Adaptive-dominant",
      TRUE ~ "Mixed"
    )
  )

```


## Immune System

1.  üî¥ Innate-dominant

    **Definition:** Patients with high neutrophil count (above the cohort median) and low lymphocyte(b-cell/ t-cell) count (at or below the median).

    **Interpretation:** These patients show a stronger innate immune response, which is the body's fast, non-specific defense mechanism.

    **Potential association:** May be linked to acute inflammation or early immune activation.

2.  üîµ Adaptive-dominant

    **Definition:** Patients with high lymphocyte count and low neutrophil count.

    **Interpretation:** These patients show a stronger adaptive immune response, involving T and B cells that respond more specifically and are responsible for immune memory.

    **Potential association:** Could reflect chronic immune activation or response to past flares.

3.  ‚ö™ Mixed

    **Definition:** Patients who don‚Äôt meet the criteria for either of the above ‚Äî for example:

    Both neutrophil and lymphocyte counts are high.

    Both are low.

    Both are near the median.

    **Interpretation:** This group may represent a balanced or ambiguous immune state and serves as a heterogeneous reference group.

| Immune Type       | Description                  |
|-------------------|------------------------------|
| Innate-dominant   | Neutrophils ‚Üë, Lymphocytes ‚Üì |
| Adaptive-dominant | Lymphocytes ‚Üë, Neutrophils ‚Üì |
| Mixed             | All other cases              |

```{r}
#genes_to_use
#df_cox_filtered
```

> Out of 157 patients, 131 had at least two valid visits with available SLEDAI and time data, enabling slope computation for longitudinal modeling. Patients with only one valid visit were excluded, as slope estimation was not feasible for them.‚Äù

# 2 Cox Modeling Strategy

We used Cox proportional hazards models to predict flare risk using gene expression and/or clinical features. We evaluated:

-   Clinical score only (SLEDAI)

-   Gene expression only (top 50 genes)

-   Combined models

We compared two time variables: visit number and cumulative time since first visit. Models were also stratified by immune subtype.

# 3 **Cox Modeling Results**

## 3.1 SLEDAI, Gene Expression, and Combined Models

We compared three Cox models to assess the relative contributions of clinical vs gene expression predictors for flare risk:

-   The **SLEDAI-only model** yielded a C-index of **0.69**, indicating moderate ability to rank patients by risk using clinical disease activity alone.

-   The **gene-only model** performed slightly better (**0.74**), suggesting that transcriptomic data captures relevant flare signals.

-   The **combined model** achieved the highest concordance (**0.82**), showing that integrating clinical and molecular data yields the most predictive survival model.

```{r}
# ÊèêÂâçÂÆö‰πâ train_data Âíå test_data
set.seed(123)
train_idx <- sample(nrow(df_cox_filtered), 0.8 * nrow(df_cox_filtered))
train_data <- df_cox_filtered[train_idx, ]
test_data <- df_cox_filtered[-train_idx, ]


# Fit and compare SLEDAI-only, gene-only, and combined models
# Model A: SLEDAI only
model_sledai <- coxph(Surv(time, status) ~ sledai, data = train_data)

# Model B: Gene expression only
cox_formula_genes <- as.formula(
  paste("Surv(time, status) ~", paste(sprintf("`%s`", genes_to_use), collapse = " + "))
)
model_genes <- coxph(cox_formula_genes, data = train_data)

# Model C: SLEDAI + gene expression
cox_formula_combined <- as.formula(
  paste("Surv(time, status) ~ sledai +", paste(sprintf("`%s`", genes_to_use), collapse = " + "))
)
model_combined <- coxph(cox_formula_combined, data = train_data)

# Extract C-index
concordance_sledai   <- summary(model_sledai)$concordance[1]
concordance_genes    <- summary(model_genes)$concordance[1]
concordance_combined <- summary(model_combined)$concordance[1]

# Combine into a data frame
comparison_df <- data.frame(
  Model = c("SLEDAI only", "Gene Expression only", "SLEDAI + Gene Expression"),
  Concordance = c(concordance_sledai, concordance_genes, concordance_combined)
)

library(DT)
datatable(
  comparison_df,
  caption = "Cox Model Comparison: Clinical vs Gene Expression vs Combined",
  options = list(dom = 't', autoWidth = TRUE),
  rownames = FALSE
)

```

## **3.2** Immune Subtype Stratification

We applied 5-fold **cross-validation** to evaluate gene-only Cox models within each immune subtype. The results show considerable variability in predictive performance:

```{r}
# 5-fold CV per subtype: adaptive, innate, mixed
# Output mean C-index and SD

library(survival)
library(rsample)
library(dplyr)
library(purrr)

set.seed(123)
folds <- vfold_cv(df_cox_filtered, v = 5, strata = status)


cv_subtype_cindex <- function(split) {
  train_data <- analysis(split)
  test_data <- assessment(split)
  
  # Ensure valid numeric time variable
  train_data$time <- as.numeric(train_data$time)
  test_data$time <- as.numeric(test_data$time)
  
  # Gene-only formula
  cox_formula <- as.formula(
    paste("Surv(time, status) ~", paste(sprintf("`%s`", genes_to_use), collapse = " + "))
  )
  
  # Fit models per subtype on training
  fit_adaptive <- coxph(cox_formula, data = train_data %>% filter(immune_type == "Adaptive-dominant"))
  fit_innate   <- coxph(cox_formula, data = train_data %>% filter(immune_type == "Innate-dominant"))
  fit_mixed    <- coxph(cox_formula, data = train_data %>% filter(immune_type == "Mixed"))
  
  # Predict risk scores on test data (subtype-matched)
  test_data <- test_data %>%
    mutate(
      risk = case_when(
        immune_type == "Adaptive-dominant" ~ predict(fit_adaptive, newdata = ., type = "risk"),
        immune_type == "Innate-dominant"   ~ predict(fit_innate, newdata = ., type = "risk"),
        immune_type == "Mixed"             ~ predict(fit_mixed, newdata = ., type = "risk"),
        TRUE ~ NA_real_
      )
    )
  
  # Compute C-index per subtype
  c_adaptive <- tryCatch({
    survConcordance(Surv(time, status) ~ risk, data = test_data %>% filter(immune_type == "Adaptive-dominant"))$concordance
  }, error = function(e) NA)

  c_innate <- tryCatch({
    survConcordance(Surv(time, status) ~ risk, data = test_data %>% filter(immune_type == "Innate-dominant"))$concordance
  }, error = function(e) NA)

  c_mixed <- tryCatch({
    survConcordance(Surv(time, status) ~ risk, data = test_data %>% filter(immune_type == "Mixed"))$concordance
  }, error = function(e) NA)
  
  return(data.frame(
    adaptive = c_adaptive,
    innate = c_innate,
    mixed = c_mixed
  ))
}

cv_immune_results <- map_dfr(folds$splits, cv_subtype_cindex)


summary_immune <- data.frame(
  Immune_Type = c("Adaptive-dominant", "Innate-dominant", "Mixed"),
  Mean_Cindex = colMeans(cv_immune_results, na.rm = TRUE),
  SD = apply(cv_immune_results, 2, sd, na.rm = TRUE)
)

library(DT)
datatable(
  summary_immune,
  caption = "5-Fold Cross-Validated C-index by Immune Subtype (Gene-only Model)",
  options = list(dom = 't', autoWidth = TRUE),
  rownames = FALSE
)
# Build final subtype models on the full df_cox_filtered data
cox_formula_subtype <- as.formula(
  paste("Surv(time, status) ~", paste(sprintf("`%s`", genes_to_use), collapse = " + "))
)

model_adaptive <- coxph(cox_formula_subtype, data = df_cox_filtered %>% filter(immune_type == "Adaptive-dominant"))
model_innate   <- coxph(cox_formula_subtype, data = df_cox_filtered %>% filter(immune_type == "Innate-dominant"))
model_mixed    <- coxph(cox_formula_subtype, data = df_cox_filtered %>% filter(immune_type == "Mixed"))

```

| Immune Type | Mean C-index | SD | Interpretation |
|------------------|------------------|------------------|------------------|
| **Adaptive-dominant** | 0.543 | 0.134 | Slightly better than random |
| **Innate-dominant** | 0.605 | 0.184 | Moderately predictive |
| **Mixed** | 0.594 | 0.071 | Moderately predictive but with lower variability |

```{r}
# Tidy results
results_adaptive <- tidy(model_adaptive) %>% mutate(immune_type = "Adaptive-dominant")
results_innate   <- tidy(model_innate) %>% mutate(immune_type = "Innate-dominant")
results_mixed    <- tidy(model_mixed) %>% mutate(immune_type = "Mixed")

# Combine and show
all_results <- bind_rows(results_adaptive, results_innate, results_mixed) %>%
  mutate(HR = exp(estimate)) %>%
  select(immune_type, term, estimate, HR, std.error, statistic, p.value)

all_results
```

# 4 **Time Scale Comparison**

## 4.1 Rationale and Time Variable Construction

-   **Peaks around 28‚Äì30, 60, and 90 days**: Suggests that visits were scheduled approximately monthly or quarterly for many patients.

-   **Long tail beyond 200 days**: Some patients had long gaps between visits (up to 2 years!).

-   Some visits occurred at **0 days**, likely meaning **same-day follow-up or repeated measures**.

```{r}
pData <- pData %>%
  mutate(days_since_last_visit = as.numeric(days_since_last_visit))

summary(pData$days_since_last_visit)
library(ggplot2)

ggplot(pData %>% filter(!is.na(days_since_last_visit)), 
       aes(x = days_since_last_visit)) +
  geom_histogram(binwidth = 10, fill = "steelblue", color = "white") +
  labs(
    title = "Distribution of Days Between Visits",
    x = "Days Since Last Visit",
    y = "Number of Visits"
  )
```

## 4.2 Single-Split Model Performance

In survival analysis, the choice of time scale is critical. The original dataset includes a `visit` variable (e.g., 1, 2, 3), which represents sequential clinical assessments. However, visits were **not equally spaced in time**, with intervals ranging from a few days to over 700 days.

To address this, we computed a new variable, `cumulative_time`, representing the **number of days since each patient‚Äôs first visit**. This provides a more accurate representation of follow-up duration in our time-to-event modeling.

```{r}
df_cox_filtered <- df_cox %>%
  select(any_of(c("sample_id", "cumulative_time", clinical_vars, genes_to_use, "sledai", "status", "time"))) %>%
  mutate(
    neutrophil_count = as.numeric(neutrophil_count),
    lymphocyte_count = as.numeric(lymphocyte_count)
  ) %>%
  mutate(
    immune_type = case_when(
      neutrophil_count > median(neutrophil_count, na.rm = TRUE) & lymphocyte_count <= median(lymphocyte_count, na.rm = TRUE) ~ "Innate-dominant",
      lymphocyte_count > median(lymphocyte_count, na.rm = TRUE) & neutrophil_count <= median(neutrophil_count, na.rm = TRUE) ~ "Adaptive-dominant",
      TRUE ~ "Mixed"
    )
  )

set.seed(123)
train_idx <- sample(nrow(df_cox_filtered), 0.8 * nrow(df_cox_filtered))
train_data <- df_cox_filtered[train_idx, ]
test_data <- df_cox_filtered[-train_idx, ]

names(train_data)  # Should include "cumulative_time"
summary(train_data$cumulative_time)  # Should not be all NA
```

```{r}
train_data$cumulative_time <- as.numeric(train_data$cumulative_time)
test_data$cumulative_time <- as.numeric(test_data$cumulative_time)

# Model 1: Using visit number (time)
cox_formula_visit <- as.formula(
  paste("Surv(time, status) ~", paste(sprintf("`%s`", genes_to_use), collapse = " + "))
)
model_visit <- coxph(cox_formula_visit, data = train_data)

# Model 2: Using cumulative time (in days)
cox_formula_cumulative <- as.formula(
  paste("Surv(cumulative_time, status) ~", paste(sprintf("`%s`", genes_to_use), collapse = " + "))
)
model_cumulative <- coxph(cox_formula_cumulative, data = train_data)

# Extract concordance index
concordance_visit <- summary(model_visit)$concordance[1]
concordance_cumulative <- summary(model_cumulative)$concordance[1]

# Create comparison table
comparison_time_models <- data.frame(
  Time_Variable = c("Visit Number (time)", "Cumulative Time (days)"),
  Concordance = c(concordance_visit, concordance_cumulative)
)

library(DT)
datatable(
  comparison_time_models,
  caption = "Comparison of Time Scales in Cox Model (Gene Expression Only)",
  options = list(dom = 't', autoWidth = TRUE),
  rownames = FALSE
)

```

## 4.3 Cross-Validation Comparison

```{r}
library(survival)
library(dplyr)
library(purrr)
library(rsample)  # for vfold_cv

set.seed(123)
folds <- vfold_cv(df_cox_filtered, v = 5, strata = status)  

# Define a function to compute C-index for a fold
get_cindex <- function(train_data, test_data, time_var) {
  # Build formula
  formula <- as.formula(
    paste0("Surv(", time_var, ", status) ~ ", paste(sprintf("`%s`", genes_to_use), collapse = " + "))
  )
  
  # Fit on training
  model <- coxph(formula, data = train_data)
  
  # Predict risk on testing
  test_data$risk_score <- predict(model, newdata = test_data, type = "risk")
  
  # Get concordance
  c_index <- tryCatch({
    survConcordance(Surv(test_data[[time_var]], test_data$status) ~ test_data$risk_score)$concordance
  }, error = function(e) NA)
  
  return(c_index)
}

# Loop over folds for both models
cv_results <- folds %>% 
  mutate(
    visit_cindex = map2_dbl(splits, id, ~{
      split_data <- analysis(.x)
      test_data <- assessment(.x)
      get_cindex(split_data, test_data, "time")
    }),
    cumulative_cindex = map2_dbl(splits, id, ~{
      split_data <- analysis(.x)
      test_data <- assessment(.x)
      
      # Ensure cumulative_time is numeric in both
      split_data$cumulative_time <- as.numeric(split_data$cumulative_time)
      test_data$cumulative_time <- as.numeric(test_data$cumulative_time)
      
      get_cindex(split_data, test_data, "cumulative_time")
    })
  )

summary_df <- data.frame(
  Model = c("Visit Number", "Cumulative Time"),
  Mean_Cindex = c(mean(cv_results$visit_cindex, na.rm = TRUE),
                  mean(cv_results$cumulative_cindex, na.rm = TRUE)),
  SD = c(sd(cv_results$visit_cindex, na.rm = TRUE),
         sd(cv_results$cumulative_cindex, na.rm = TRUE))
)

library(DT)
datatable(
  summary_df,
  caption = "5-Fold Cross-Validated C-index: Visit vs Cumulative Time",
  options = list(dom = 't', autoWidth = TRUE),
  rownames = FALSE
)

```

Initially, our gene-only Cox model achieved a C-index of 0.81 using a single train/test split, indicating strong predictive performance. However, 5-fold cross-validation revealed a mean C-index closer to 0.63, suggesting the original estimate was **optimistically biased**.

This discrepancy emphasizes the importance of using cross-validation to obtain more **robust and generalizable performance estimates**, especially in high-dimensional settings like gene expression analysis.

# 5 Summary

-   The combined gene expression model performed best overall

<!-- -->

-   Time variable choice had modest effect: cumulative time slightly more interpretable

-   Cross-validation revealed lower C-index (\~0.63), highlighting importance of proper evaluation

# 6. Penalized Cox Modeling with LASSO

LASSO regularization was applied to a Cox model using only gene expression data in order to improve model generalizability and reduce overfitting from high-dimensional features. This approach automatically selects a sparse subset of predictive genes by shrinking others to zero.

We compared its performance to a standard Cox model with all top 50 genes using 5-fold cross-validation.

## 6.1 Gene-only LASSO Cox Model Performance

```{r}
library(rsample)
library(purrr)

set.seed(123)
folds <- vfold_cv(df_cox_filtered, v = 5, strata = status)

# Function to compute C-index for LASSO model using genes only
get_lasso_cindex <- function(split) {
  train_data <- analysis(split) %>%
    filter(cumulative_time > 0) %>%
    mutate(cumulative_time = as.numeric(cumulative_time))

  test_data <- assessment(split) %>%
    filter(cumulative_time > 0) %>%
    mutate(cumulative_time = as.numeric(cumulative_time))

  X_train <- as.matrix(train_data[, genes_to_use])
  y_train <- Surv(train_data$cumulative_time, train_data$status)

  X_test <- as.matrix(test_data[, genes_to_use])
  y_test <- Surv(test_data$cumulative_time, test_data$status)

  model <- cv.glmnet(X_train, y_train, family = "cox", alpha = 1)

  risk_score <- predict(model, newx = X_test, s = "lambda.min", type = "link")
  c_index <- tryCatch({
    survConcordance(y_test ~ risk_score)$concordance
  }, error = function(e) NA)

  return(c_index)
}


lasso_gene_cindices <- map_dbl(folds$splits, get_lasso_cindex)

mean_cindex_lasso <- mean(lasso_gene_cindices, na.rm = TRUE)
sd_cindex_lasso <- sd(lasso_gene_cindices, na.rm = TRUE)

cindex_comparison <- data.frame(
  Model = c("Cox (Top 50 genes)", "LASSO Cox (Genes only)"),
  Mean_Cindex = c(
    mean(cv_results$cumulative_cindex, na.rm = TRUE),
    mean_cindex_lasso
  ),
  SD = c(
    sd(cv_results$cumulative_cindex, na.rm = TRUE),
    sd_cindex_lasso
  )
)

library(DT)
datatable(
  cindex_comparison,
  caption = "Cross-Validated C-index: Standard Cox vs LASSO Cox (Gene-only)",
  options = list(dom = 't', autoWidth = TRUE),
  rownames = FALSE
)


```

Although the standard Cox model using 50 genes yielded slightly higher mean C-index in cross-validation, we selected the **LASSO Cox (gene-only) model** as our final model due to its comparable predictive performance, lower variance, and practical advantages for deployment in a Shiny application. This regularized model automatically selected a sparse subset of informative genes, improving robustness and interpretability.

```{r}
library(glmnet)

# Filter for valid cumulative time > 0
cox_lasso_data <- train_data %>% filter(cumulative_time > 0)

# Prepare input matrix and response (gene-only)
X <- as.matrix(cox_lasso_data[, genes_to_use])
y <- Surv(cox_lasso_data$cumulative_time, cox_lasso_data$status)

# Fit LASSO Cox model
cvfit <- cv.glmnet(X, y, family = "cox", alpha = 1)  # alpha = 1 for LASSO

# Plot cross-validated deviance
plot(cvfit)

# Extract non-zero coefficients at optimal lambda
selected_genes <- coef(cvfit, s = "lambda.min")
nonzero_genes <- selected_genes[selected_genes != 0]
nonzero_genes
```

What the two vertical lines mean:

| Line | Represents | Interpretation |
|----|----|----|
| **Left vertical line** | `lambda.min` | The value of Œª that gives **the minimum cross-validated partial likelihood deviance** (i.e., best model fit). You‚Äôre currently using this one. ‚úÖ |
| **Right vertical line** | `lambda.1se` | The **largest** Œª value within **1 standard error** of the minimum deviance. It gives a **simpler model** with **fewer variables**, but slightly worse fit. |

```{r}
# List selected gene names
selected_gene_names <- rownames(selected_genes)[as.numeric(selected_genes) != 0]
selected_gene_names_df <- data.frame(Gene = selected_gene_names)

library(DT)
datatable(
  selected_gene_names_df,
  caption = "Genes Selected by LASSO Cox Model (lambda.min)",
  options = list(dom = 't', autoWidth = TRUE),
  rownames = FALSE
)

```

V1: The **partial log-hazard ratio** for that gene\
(i.e., how much the log-risk of flare increases or decreases per unit increase in expression)

```{r}
gene_effects <- as.matrix(nonzero_genes)
sorted_genes <- gene_effects[order(abs(gene_effects), decreasing = TRUE), , drop = FALSE]
datatable(as.data.frame(sorted_genes), caption = "LASSO-Selected Genes Ordered by Effect Size")
```


# treatment


```{r}
colnames(pData)

```


```{r}

treatment_vars <- c(
  "treatment", "treatment_lmm1", "neph_treat_lmm3",
  "steroid_iv_category", "oral_steroids_category", "cyclophosphamide_category",
  "mycophenolate_category", "hydroxychloroquine_category",
  "metotrexate_category", "nsaid_category", "asa_category"
)


treatment_levels <- lapply(pData[, treatment_vars], function(x) unique(na.omit(x)))


for (name in names(treatment_levels)) {
  cat("\n====", name, "====\n")
  print(treatment_levels[[name]])
}

```




```{r}
# Merge rare categories to generate a new label neph_treat_grouped
pData <- pData %>%
  mutate(
    neph_treat_grouped = case_when(
      neph_treat_lmm3 %in% c("F_Prolif_NOTR", "G_Prolif_PLAQ", "H_Prolif_ORAL") ~ "Prolif_ORALorMild",
      neph_treat_lmm3 %in% c("K_Membr_ORAL", "L_Membr_MMF") ~ "Membr_Treated",
      neph_treat_lmm3 %in% c("A_NoLN_NOTR", "C_NoLN_ORAL") ~ "NoLN_ORALorNone",
      TRUE ~ neph_treat_lmm3
    )
  )

```


```{r}
# Generate immune-type categorical variable
pData <- pData %>%
  mutate(
    neutrophil_count = as.numeric(neutrophil_count),
    lymphocyte_count = as.numeric(lymphocyte_count),
    immune_type = case_when(
      neutrophil_count > median(neutrophil_count, na.rm = TRUE) & lymphocyte_count <= median(lymphocyte_count, na.rm = TRUE) ~ "Innate-dominant",
      lymphocyte_count > median(lymphocyte_count, na.rm = TRUE) & neutrophil_count <= median(neutrophil_count, na.rm = TRUE) ~ "Adaptive-dominant",
      TRUE ~ "Mixed"
    )
  )

```

```{r}

p_clinical2 <- pData %>%
  select(sample_id, neph_treat_grouped, sledai, c3, c4, ds_dna, alb, age, immune_type) %>%
  filter(if_all(everything(), ~ !is.na(.)))

# Calculate riskscore and merge all variables
df_treat2 <- df_cox_filtered %>%
  filter(sample_id %in% p_clinical2$sample_id) %>%
  mutate(
    risk_score = predict(cvfit, newx = as.matrix(select(., all_of(genes_to_use))), s = "lambda.min", type = "link")
  ) %>%
  left_join(p_clinical2, by = "sample_id") %>%
  rename(
    sledai = sledai.y,
    immune_type = immune_type.y
  ) %>%
  mutate(
    neph_treat_grouped = as.factor(neph_treat_grouped),
    immune_type = as.factor(immune_type)
  ) %>%
  select(risk_score, sledai, c3, c4, ds_dna, alb, age, immune_type, neph_treat_grouped)

```

```{r}
library(caret)
library(randomForest)

# Set up 10 cross validation
ctrl <- trainControl(method = "cv", number = 10)


set.seed(123)
rf_model_cv <- train(
  neph_treat_grouped ~ .,
  data = df_treat2,
  method = "rf",
  trControl = ctrl,
  ntree = 500
)

# ËæìÂá∫Ê®°ÂûãËØÑ‰º∞ÁªìÊûú
print(rf_model_cv)

```
```{r}
# You can use this rf_madel_cv model object, so you don't have to run the time-consuming 10 fold cross validation again next time!
saveRDS(rf_model_cv, file = "rf_model_cv_best.rds")


#rf_model_cv <- readRDS("rf_model_cv_best.rds")
#predict(rf_model_cv$finalModel, newdata = new_patient_data)
#predict(rf_model_cv$finalModel, newdata = new_patient_data, type = "prob")

```

```{r}

library(ggplot2)
ggplot(rf_model_cv) +
  labs(title = "10-Fold CV Accuracy by mtry",
       x = "Number of Variables Tried at Each Split (mtry)",
       y = "Accuracy (Cross-Validation)")

```
Given a sample input, the model can predict the most likely treatment plan (Top-1 or Top-3) for the patient, and we can use this recommendation system in Shiny as a basis.
```{r}
# #Randomly select a trained sample as the output sample
example_patient <- rf_model_cv$trainingData[1, , drop = FALSE]


example_patient <- example_patient[, setdiff(colnames(example_patient), ".outcome"), drop = FALSE]


probs <- predict(rf_model_cv, newdata = example_patient, type = "prob")


top3 <- sort(unlist(probs[1, ]), decreasing = TRUE)[1:3]


data.frame(
  Treatment = names(top3),
  Probability = round(as.numeric(top3), 3)
)


```

